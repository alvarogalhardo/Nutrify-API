// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  role      Role      @default(NUTRITIONIST)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Session   Session[]
  Patient   Patient[]
}

enum Role {
  NUTRITIONIST
  PATIENT
  ADMIN
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  name               String               @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  telephone          String               @db.VarChar(13)
  birthday           DateTime             @db.Date()
  gender             Gender
  PhysicalAssessment PhysicalAssessment[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model SkinFolds {
  id                   Int                @id @default(autoincrement())
  physicalAssessmentId Int
  physicalAssessment   PhysicalAssessment @relation(fields: [physicalAssessmentId], references: [id], onDelete: Cascade)
  triceps              Int
  biceps               Int
  abdominal            Int
  subscapular          Int
  midAxillary          Int
  thigh                Int
  thoracic             Int
  calf                 Int
  waist                Int
  hip                  Int
  suprailiac           Int
  supraspinatus        Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model BodyCircumference {
  id                                Int                @id @default(autoincrement())
  physicalAssessmentId              Int
  physicalAssessment                PhysicalAssessment @relation(fields: [physicalAssessmentId], references: [id], onDelete: Cascade)
  neckCircumference                 Int
  chestCircumference                Int
  shoulderCircumference             Int
  waistCircumference                Int
  hipCircumference                  Int
  abdomenCircumference              Int
  relaxed_right_armCircumference    Int
  contracted_right_armCircumference Int
  relaxed_left_armCircumference     Int
  contracted_left_armCircumference  Int
  forearmCircumference              Int
  thighCircumference                Int
  calfCircumference                 Int
  createdAt                         DateTime           @default(now())
  updatedAt                         DateTime           @updatedAt
}

model BoneDiameter {
  id                   Int                @id @default(autoincrement())
  physicalAssessmentId Int
  physicalAssessment   PhysicalAssessment @relation(fields: [physicalAssessmentId], references: [id], onDelete: Cascade)
  humerus              Int
  wrist                Int
  femur                Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model PhysicalAssessment {
  id                Int                 @id @default(autoincrement())
  patientId         Int
  Patient           Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  weight            Int
  height            Int
  sittingHeight     Int
  kneeHeight        Int
  SkinFolds         SkinFolds[]
  BodyCircumference BodyCircumference[]
  BoneDiameter      BoneDiameter[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

enum Gender {
  MALE
  FEMALE
}
